{"ast":null,"code":"var _jsxFileName = \"/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ModalAdd from \"./ModalAdd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = () => {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const handleShowModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    name: 'Element 1',\n    children: [{\n      id: 2,\n      name: 'Element 1.1',\n      children: [{\n        id: 3,\n        name: 'Element 1.1.1'\n      }, {\n        id: 4,\n        name: 'Element 1.1.2'\n      }]\n    }, {\n      id: 5,\n      name: 'Element 1.2'\n    }]\n  }]);\n  const renderTree = nodes => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nodes.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: node.id,\n            checked: selectedNode === node.id,\n            onChange: event => {\n              const newId = +event.target.value;\n              setSelectedNode(newId);\n              console.log(selectedNode);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this), node.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), node.children && renderTree(node.children)]\n      }, node.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderTree(nodes), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShowModal,\n        children: \"Show Modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalAdd, {\n        isOpen: showModal,\n        onClose: handleCloseModal,\n        nodes: nodes,\n        selectedNode: selectedNode,\n        setNodes: setNodes,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ModalAdd Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Some text here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(Tree, \"YpgvvlZKDRD/F0fsw1Qr8GVniCI=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useState","ModalAdd","jsxDEV","_jsxDEV","Tree","_s","showModal","setShowModal","handleShowModal","handleCloseModal","selectedNode","setSelectedNode","nodes","setNodes","id","name","children","renderTree","map","node","type","value","checked","onChange","event","newId","target","console","log","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","isOpen","onClose","_c","$RefreshReg$"],"sources":["/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx"],"sourcesContent":["import React, {useRef, useState} from 'react';\nimport ModalAdd from \"./ModalAdd\";\n\ninterface Node {\n    id: number;\n    name: string;\n    children?: Node[];\n}\n\n\n\nconst Tree: React.FC = () => {\n\n    const [showModal, setShowModal] = useState(false);\n\n    const handleShowModal = () => {\n        setShowModal(true);\n    };\n\n    const handleCloseModal = () => {\n        setShowModal(false);\n    };\n\n    const [selectedNode, setSelectedNode] = useState(0);\n    const [nodes, setNodes] = useState<Node[]>([\n        {\n            id: 1,\n            name: 'Element 1',\n            children: [\n                {\n                    id: 2,\n                    name: 'Element 1.1',\n                    children: [\n                        {\n                            id: 3,\n                            name: 'Element 1.1.1',\n                        },\n                        {\n                            id: 4,\n                            name: 'Element 1.1.2',\n                        },\n                    ],\n                },\n                {\n                    id: 5,\n                    name: 'Element 1.2',\n                },\n            ],\n\n        },\n    ]);\n\n\n\n\n\n\n\n    const renderTree = (nodes: Node[]) => {\n        return (\n            <ul>\n                {nodes.map((node) => (\n                    <li key={node.id}>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value={node.id}\n                                checked={selectedNode === node.id}\n                                onChange={(event) => {\n                                    const newId = +event.target.value;\n                                    setSelectedNode(newId);\n                                    console.log(selectedNode);\n                                }}\n                            />\n                            {node.name}\n                        </label>\n                        {node.children && renderTree(node.children)}\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    return (\n        <div>\n            {renderTree(nodes)}\n\n            {/*<AddNode />*/}\n            <div className=\"app\">\n                <button onClick={handleShowModal}>Show Modal</button>\n                <ModalAdd isOpen={showModal} onClose={handleCloseModal} nodes={nodes} selectedNode={selectedNode} setNodes={setNodes}>\n                    <h1>ModalAdd Content</h1>\n                    <p>Some text here...</p>\n                    <button onClick={handleCloseModal}>Close</button>\n                </ModalAdd>\n            </div>\n        </div>\n    );\n};\n\nexport default Tree;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}