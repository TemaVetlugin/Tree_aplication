{"ast":null,"code":"var _jsxFileName = \"/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = () => {\n  _s();\n  const titleNodeRef = useRef(null);\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    name: 'Element 1',\n    children: [{\n      id: 2,\n      name: 'Element 1.1',\n      children: [{\n        id: 3,\n        name: 'Element 1.1.1'\n      }, {\n        id: 4,\n        name: 'Element 1.1.2'\n      }]\n    }, {\n      id: 5,\n      name: 'Element 1.2'\n    }]\n  }]);\n  const addChildNode = (nodes, parentId, newNode) => {\n    return nodes.map(node => {\n      if (node.id === parentId) {\n        return {\n          ...node,\n          children: [...(node.children || []), newNode]\n        };\n      } else if (node.children) {\n        return {\n          ...node,\n          children: addChildNode(node.children, parentId, newNode)\n        };\n      }\n      return node;\n    });\n  };\n  const getMaxId = arr => {\n    let maxId = 0;\n    arr.forEach(item => {\n      if (item.id > maxId) {\n        maxId = item.id;\n      }\n      if (item.children) {\n        const childMaxId = getMaxId(item.children);\n        if (childMaxId > maxId) {\n          maxId = childMaxId;\n        }\n      }\n    });\n    return maxId;\n  };\n  const onSubmitAdd = ev => {\n    var _titleNodeRef$current;\n    ev.preventDefault();\n    const newNode = {\n      id: getMaxId(nodes) + 1,\n      name: ((_titleNodeRef$current = titleNodeRef.current) === null || _titleNodeRef$current === void 0 ? void 0 : _titleNodeRef$current.value) || ''\n    };\n    setNodes([...nodes, newNode]);\n    const parentId = 0; // id узла, в который нужно добавить новый узел\n    const updatedNodes = addChildNode(nodes, parentId, newNode);\n    setNodes(updatedNodes);\n  };\n  const renderTree = items => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: item.name,\n          onChange: event => {\n            const newName = event.target.value;\n            const updatedItems = items.map(i => i.id === item.id ? {\n              ...i,\n              name: newName\n            } : i);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Element 1\",\n            children: \"Element 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Element 2\",\n            children: \"Element 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Element 3\",\n            children: \"Element 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), item.children && renderTree(item.children)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderTree(nodes), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form form-control w-100\",\n      onSubmit: onSubmitAdd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group m-3\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: titleNodeRef,\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"\\u0422\\u0435\\u043C\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success m-3\",\n        type: \"submit\",\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(Tree, \"c1LBr4Ki1Px3K4P4wmMT5M8txMY=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Tree","_s","titleNodeRef","nodes","setNodes","id","name","children","addChildNode","parentId","newNode","map","node","getMaxId","arr","maxId","forEach","item","childMaxId","onSubmitAdd","ev","_titleNodeRef$current","preventDefault","current","value","updatedNodes","renderTree","items","onChange","event","newName","target","updatedItems","i","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","ref","type","placeholder","_c","$RefreshReg$"],"sources":["/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx"],"sourcesContent":["import React, {useRef, useState} from 'react';\nimport AddItem from './AddItem';\n\ninterface Item {\n    id: number;\n    name: string;\n    children?: Item[];\n}\n\nconst Tree: React.FC = () => {\n\n    const titleNodeRef: React.RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    const [nodes, setNodes] = useState<Item[]>([\n        {\n            id: 1,\n            name: 'Element 1',\n            children: [\n                {\n                    id: 2,\n                    name: 'Element 1.1',\n                    children: [\n                        {\n                            id: 3,\n                            name: 'Element 1.1.1',\n                        },\n                        {\n                            id: 4,\n                            name: 'Element 1.1.2',\n                        },\n                    ],\n                },\n                {\n                    id: 5,\n                    name: 'Element 1.2',\n                },\n            ],\n\n        },\n    ]);\n\n    const addChildNode = (nodes: Item[], parentId: number, newNode: Item): Item[] => {\n        return nodes.map((node) => {\n            if (node.id === parentId) {\n                return {\n                    ...node,\n                    children: [...(node.children || []), newNode],\n                };\n            } else if (node.children) {\n                return {\n                    ...node,\n                    children: addChildNode(node.children, parentId, newNode),\n                };\n            }\n            return node;\n        });\n    };\n\n    const getMaxId = (arr: Item[]): number => {\n        let maxId = 0;\n        arr.forEach((item) => {\n            if (item.id > maxId) {\n                maxId = item.id;\n            }\n            if (item.children) {\n                const childMaxId = getMaxId(item.children);\n                if (childMaxId > maxId) {\n                    maxId = childMaxId;\n                }\n            }\n        });\n        return maxId;\n    };\n\n    const onSubmitAdd = (ev: any) => {\n        ev.preventDefault();\n\n        const newNode: Item = {\n            id: getMaxId(nodes) + 1,\n            name: titleNodeRef.current?.value || '',\n        };\n\n        setNodes([...nodes, newNode]);\n\n        const parentId = 0; // id узла, в который нужно добавить новый узел\n        const updatedNodes = addChildNode(nodes, parentId, newNode);\n        setNodes(updatedNodes);\n    }\n\n    const renderTree = (items: Item[]) => {\n        return (\n            <ul>\n                {items.map((item) => (\n                    <li key={item.id}>\n                        <select\n                            value={item.name}\n                            onChange={(event) => {\n                                const newName = event.target.value;\n                                const updatedItems = items.map((i) =>\n                                    i.id === item.id ? { ...i, name: newName } : i\n                                );\n                            }}\n                        >\n                            <option value=\"Element 1\">Element 1</option>\n                            <option value=\"Element 2\">Element 2</option>\n                            <option value=\"Element 3\">Element 3</option>\n                        </select>\n                        {item.children && renderTree(item.children)}\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    return (\n        <div>\n            {renderTree(nodes)}\n            <form className=\"form form-control w-100\" onSubmit={onSubmitAdd}>\n                <div className=\"form-group m-3\">\n                    <input ref={titleNodeRef} type=\"text\" className=\"form-control\" placeholder=\"Тема\"></input>\n                </div>\n                <button className=\"btn btn-success m-3\" type=\"submit\">Добавить</button>\n            </form>\n            {/*<AddItem />*/}\n        </div>\n    );\n};\n\nexport default Tree;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9C,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEzB,MAAMC,YAA+C,GAAGN,MAAM,CAAmB,IAAI,CAAC;EAEtF,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAS,CACvC;IACIQ,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,WAAW;IACjBC,QAAQ,EAAE,CACN;MACIF,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,CACN;QACIF,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE;MACV,CAAC,EACD;QACID,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE;MACV,CAAC;IAET,CAAC,EACD;MACID,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE;IACV,CAAC;EAGT,CAAC,CACJ,CAAC;EAEF,MAAME,YAAY,GAAGA,CAACL,KAAa,EAAEM,QAAgB,EAAEC,OAAa,KAAa;IAC7E,OAAOP,KAAK,CAACQ,GAAG,CAAEC,IAAI,IAAK;MACvB,IAAIA,IAAI,CAACP,EAAE,KAAKI,QAAQ,EAAE;QACtB,OAAO;UACH,GAAGG,IAAI;UACPL,QAAQ,EAAE,CAAC,IAAIK,IAAI,CAACL,QAAQ,IAAI,EAAE,CAAC,EAAEG,OAAO;QAChD,CAAC;MACL,CAAC,MAAM,IAAIE,IAAI,CAACL,QAAQ,EAAE;QACtB,OAAO;UACH,GAAGK,IAAI;UACPL,QAAQ,EAAEC,YAAY,CAACI,IAAI,CAACL,QAAQ,EAAEE,QAAQ,EAAEC,OAAO;QAC3D,CAAC;MACL;MACA,OAAOE,IAAI;IACf,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,QAAQ,GAAIC,GAAW,IAAa;IACtC,IAAIC,KAAK,GAAG,CAAC;IACbD,GAAG,CAACE,OAAO,CAAEC,IAAI,IAAK;MAClB,IAAIA,IAAI,CAACZ,EAAE,GAAGU,KAAK,EAAE;QACjBA,KAAK,GAAGE,IAAI,CAACZ,EAAE;MACnB;MACA,IAAIY,IAAI,CAACV,QAAQ,EAAE;QACf,MAAMW,UAAU,GAAGL,QAAQ,CAACI,IAAI,CAACV,QAAQ,CAAC;QAC1C,IAAIW,UAAU,GAAGH,KAAK,EAAE;UACpBA,KAAK,GAAGG,UAAU;QACtB;MACJ;IACJ,CAAC,CAAC;IACF,OAAOH,KAAK;EAChB,CAAC;EAED,MAAMI,WAAW,GAAIC,EAAO,IAAK;IAAA,IAAAC,qBAAA;IAC7BD,EAAE,CAACE,cAAc,CAAC,CAAC;IAEnB,MAAMZ,OAAa,GAAG;MAClBL,EAAE,EAAEQ,QAAQ,CAACV,KAAK,CAAC,GAAG,CAAC;MACvBG,IAAI,EAAE,EAAAe,qBAAA,GAAAnB,YAAY,CAACqB,OAAO,cAAAF,qBAAA,uBAApBA,qBAAA,CAAsBG,KAAK,KAAI;IACzC,CAAC;IAEDpB,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEO,OAAO,CAAC,CAAC;IAE7B,MAAMD,QAAQ,GAAG,CAAC,CAAC,CAAC;IACpB,MAAMgB,YAAY,GAAGjB,YAAY,CAACL,KAAK,EAAEM,QAAQ,EAAEC,OAAO,CAAC;IAC3DN,QAAQ,CAACqB,YAAY,CAAC;EAC1B,CAAC;EAED,MAAMC,UAAU,GAAIC,KAAa,IAAK;IAClC,oBACI5B,OAAA;MAAAQ,QAAA,EACKoB,KAAK,CAAChB,GAAG,CAAEM,IAAI,iBACZlB,OAAA;QAAAQ,QAAA,gBACIR,OAAA;UACIyB,KAAK,EAAEP,IAAI,CAACX,IAAK;UACjBsB,QAAQ,EAAGC,KAAK,IAAK;YACjB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACP,KAAK;YAClC,MAAMQ,YAAY,GAAGL,KAAK,CAAChB,GAAG,CAAEsB,CAAC,IAC7BA,CAAC,CAAC5B,EAAE,KAAKY,IAAI,CAACZ,EAAE,GAAG;cAAE,GAAG4B,CAAC;cAAE3B,IAAI,EAAEwB;YAAQ,CAAC,GAAGG,CACjD,CAAC;UACL,CAAE;UAAA1B,QAAA,gBAEFR,OAAA;YAAQyB,KAAK,EAAC,WAAW;YAAAjB,QAAA,EAAC;UAAS;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5CtC,OAAA;YAAQyB,KAAK,EAAC,WAAW;YAAAjB,QAAA,EAAC;UAAS;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5CtC,OAAA;YAAQyB,KAAK,EAAC,WAAW;YAAAjB,QAAA,EAAC;UAAS;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,EACRpB,IAAI,CAACV,QAAQ,IAAImB,UAAU,CAACT,IAAI,CAACV,QAAQ,CAAC;MAAA,GAdtCU,IAAI,CAACZ,EAAE;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAeZ,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEb,CAAC;EAED,oBACItC,OAAA;IAAAQ,QAAA,GACKmB,UAAU,CAACvB,KAAK,CAAC,eAClBJ,OAAA;MAAMuC,SAAS,EAAC,yBAAyB;MAACC,QAAQ,EAAEpB,WAAY;MAAAZ,QAAA,gBAC5DR,OAAA;QAAKuC,SAAS,EAAC,gBAAgB;QAAA/B,QAAA,eAC3BR,OAAA;UAAOyC,GAAG,EAAEtC,YAAa;UAACuC,IAAI,EAAC,MAAM;UAACH,SAAS,EAAC,cAAc;UAACI,WAAW,EAAC;QAAM;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzF,CAAC,eACNtC,OAAA;QAAQuC,SAAS,EAAC,qBAAqB;QAACG,IAAI,EAAC,QAAQ;QAAAlC,QAAA,EAAC;MAAQ;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEd,CAAC;AAACpC,EAAA,CArHID,IAAc;AAAA2C,EAAA,GAAd3C,IAAc;AAuHpB,eAAeA,IAAI;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}