{"ast":null,"code":"var _jsxFileName = \"/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = () => {\n  _s();\n  const titleNodeRef = useRef(null);\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    name: 'Element 1',\n    children: [{\n      id: 2,\n      name: 'Element 1.1',\n      children: [{\n        id: 3,\n        name: 'Element 1.1.1'\n      }, {\n        id: 4,\n        name: 'Element 1.1.2'\n      }]\n    }, {\n      id: 5,\n      name: 'Element 1.2'\n    }]\n  }]);\n  const addChildNode = (nodes, parentId, newNode) => {\n    return nodes.map(node => {\n      if (node.id === parentId) {\n        return {\n          ...node,\n          children: [...(node.children || []), newNode]\n        };\n      } else if (node.children) {\n        return {\n          ...node,\n          children: addChildNode(node.children, parentId, newNode)\n        };\n      }\n      return node;\n    });\n  };\n  const getMaxId = arr => {\n    let maxId = 0;\n    arr.forEach(node => {\n      if (node.id > maxId) {\n        maxId = node.id;\n      }\n      if (node.children) {\n        const childMaxId = getMaxId(node.children);\n        if (childMaxId > maxId) {\n          maxId = childMaxId;\n        }\n      }\n    });\n    return maxId;\n  };\n  const onSubmitAdd = ev => {\n    var _titleNodeRef$current;\n    ev.preventDefault();\n    const newNode = {\n      id: getMaxId(nodes) + 1,\n      name: ((_titleNodeRef$current = titleNodeRef.current) === null || _titleNodeRef$current === void 0 ? void 0 : _titleNodeRef$current.value) || ''\n    };\n    setNodes([...nodes, newNode]);\n    const parentId = 0; // id узла, в который нужно добавить новый узел\n    const updatedNodes = addChildNode(nodes, parentId, newNode);\n    setNodes(updatedNodes);\n  };\n  const renderTree = nodes => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nodes.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: node.id,\n            checked: selectedNode === node.id,\n            onChange: event => {\n              const newId = event.target.value;\n              // setSelectedNode(newId);\n              // const updatedNodes = nodes.map((i) =>\n              //     i.id === node.id ? { ...i, name: newId } : i\n              // );\n              // setNodes(updatedNodes);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this), node.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), node.children && renderTree(node.children)]\n      }, node.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderTree(nodes), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form form-control w-100\",\n      onSubmit: onSubmitAdd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group m-3\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: titleNodeRef,\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"\\u0422\\u0435\\u043C\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success m-3\",\n        type: \"submit\",\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(Tree, \"TzK20ZEsfEPAsrgSYQYO1LTDznU=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Tree","_s","titleNodeRef","selectedNode","setSelectedNode","nodes","setNodes","id","name","children","addChildNode","parentId","newNode","map","node","getMaxId","arr","maxId","forEach","childMaxId","onSubmitAdd","ev","_titleNodeRef$current","preventDefault","current","value","updatedNodes","renderTree","type","checked","onChange","event","newId","target","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","ref","placeholder","_c","$RefreshReg$"],"sources":["/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx"],"sourcesContent":["import React, {useRef, useState} from 'react';\n\ninterface Node {\n    id: number;\n    name: string;\n    children?: Node[];\n}\n\nconst Tree: React.FC = () => {\n\n    const titleNodeRef: React.RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);\n    const [selectedNode, setSelectedNode] = useState(0);\n    const [nodes, setNodes] = useState<Node[]>([\n        {\n            id: 1,\n            name: 'Element 1',\n            children: [\n                {\n                    id: 2,\n                    name: 'Element 1.1',\n                    children: [\n                        {\n                            id: 3,\n                            name: 'Element 1.1.1',\n                        },\n                        {\n                            id: 4,\n                            name: 'Element 1.1.2',\n                        },\n                    ],\n                },\n                {\n                    id: 5,\n                    name: 'Element 1.2',\n                },\n            ],\n\n        },\n    ]);\n\n    const addChildNode = (nodes: Node[], parentId: number, newNode: Node): Node[] => {\n        return nodes.map((node) => {\n            if (node.id === parentId) {\n                return {\n                    ...node,\n                    children: [...(node.children || []), newNode],\n                };\n            } else if (node.children) {\n                return {\n                    ...node,\n                    children: addChildNode(node.children, parentId, newNode),\n                };\n            }\n            return node;\n        });\n    };\n\n    const getMaxId = (arr: Node[]): number => {\n        let maxId = 0;\n        arr.forEach((node) => {\n            if (node.id > maxId) {\n                maxId = node.id;\n            }\n            if (node.children) {\n                const childMaxId = getMaxId(node.children);\n                if (childMaxId > maxId) {\n                    maxId = childMaxId;\n                }\n            }\n        });\n        return maxId;\n    };\n\n    const onSubmitAdd = (ev: any) => {\n        ev.preventDefault();\n\n        const newNode: Node = {\n            id: getMaxId(nodes) + 1,\n            name: titleNodeRef.current?.value || '',\n        };\n\n        setNodes([...nodes, newNode]);\n\n        const parentId = 0; // id узла, в который нужно добавить новый узел\n        const updatedNodes = addChildNode(nodes, parentId, newNode);\n        setNodes(updatedNodes);\n    }\n\n    const renderTree = (nodes: Node[]) => {\n        return (\n            <ul>\n                {nodes.map((node) => (\n                    <li key={node.id}>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value={node.id}\n                                checked={selectedNode === node.id}\n                                onChange={(event) => {\n                                    const newId = event.target.value;\n                                    // setSelectedNode(newId);\n                                    // const updatedNodes = nodes.map((i) =>\n                                    //     i.id === node.id ? { ...i, name: newId } : i\n                                    // );\n                                    // setNodes(updatedNodes);\n                                }}\n                            />\n                            {node.name}\n                        </label>\n                        {node.children && renderTree(node.children)}\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    return (\n        <div>\n            {renderTree(nodes)}\n            <form className=\"form form-control w-100\" onSubmit={onSubmitAdd}>\n                <div className=\"form-group m-3\">\n                    <input ref={titleNodeRef} type=\"text\" className=\"form-control\" placeholder=\"Тема\"></input>\n                </div>\n                <button className=\"btn btn-success m-3\" type=\"submit\">Добавить</button>\n            </form>\n            {/*<AddNode />*/}\n        </div>\n    );\n};\n\nexport default Tree;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9C,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEzB,MAAMC,YAA+C,GAAGN,MAAM,CAAmB,IAAI,CAAC;EACtF,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAS,CACvC;IACIU,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,WAAW;IACjBC,QAAQ,EAAE,CACN;MACIF,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,CACN;QACIF,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE;MACV,CAAC,EACD;QACID,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE;MACV,CAAC;IAET,CAAC,EACD;MACID,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE;IACV,CAAC;EAGT,CAAC,CACJ,CAAC;EAEF,MAAME,YAAY,GAAGA,CAACL,KAAa,EAAEM,QAAgB,EAAEC,OAAa,KAAa;IAC7E,OAAOP,KAAK,CAACQ,GAAG,CAAEC,IAAI,IAAK;MACvB,IAAIA,IAAI,CAACP,EAAE,KAAKI,QAAQ,EAAE;QACtB,OAAO;UACH,GAAGG,IAAI;UACPL,QAAQ,EAAE,CAAC,IAAIK,IAAI,CAACL,QAAQ,IAAI,EAAE,CAAC,EAAEG,OAAO;QAChD,CAAC;MACL,CAAC,MAAM,IAAIE,IAAI,CAACL,QAAQ,EAAE;QACtB,OAAO;UACH,GAAGK,IAAI;UACPL,QAAQ,EAAEC,YAAY,CAACI,IAAI,CAACL,QAAQ,EAAEE,QAAQ,EAAEC,OAAO;QAC3D,CAAC;MACL;MACA,OAAOE,IAAI;IACf,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,QAAQ,GAAIC,GAAW,IAAa;IACtC,IAAIC,KAAK,GAAG,CAAC;IACbD,GAAG,CAACE,OAAO,CAAEJ,IAAI,IAAK;MAClB,IAAIA,IAAI,CAACP,EAAE,GAAGU,KAAK,EAAE;QACjBA,KAAK,GAAGH,IAAI,CAACP,EAAE;MACnB;MACA,IAAIO,IAAI,CAACL,QAAQ,EAAE;QACf,MAAMU,UAAU,GAAGJ,QAAQ,CAACD,IAAI,CAACL,QAAQ,CAAC;QAC1C,IAAIU,UAAU,GAAGF,KAAK,EAAE;UACpBA,KAAK,GAAGE,UAAU;QACtB;MACJ;IACJ,CAAC,CAAC;IACF,OAAOF,KAAK;EAChB,CAAC;EAED,MAAMG,WAAW,GAAIC,EAAO,IAAK;IAAA,IAAAC,qBAAA;IAC7BD,EAAE,CAACE,cAAc,CAAC,CAAC;IAEnB,MAAMX,OAAa,GAAG;MAClBL,EAAE,EAAEQ,QAAQ,CAACV,KAAK,CAAC,GAAG,CAAC;MACvBG,IAAI,EAAE,EAAAc,qBAAA,GAAApB,YAAY,CAACsB,OAAO,cAAAF,qBAAA,uBAApBA,qBAAA,CAAsBG,KAAK,KAAI;IACzC,CAAC;IAEDnB,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEO,OAAO,CAAC,CAAC;IAE7B,MAAMD,QAAQ,GAAG,CAAC,CAAC,CAAC;IACpB,MAAMe,YAAY,GAAGhB,YAAY,CAACL,KAAK,EAAEM,QAAQ,EAAEC,OAAO,CAAC;IAC3DN,QAAQ,CAACoB,YAAY,CAAC;EAC1B,CAAC;EAED,MAAMC,UAAU,GAAItB,KAAa,IAAK;IAClC,oBACIN,OAAA;MAAAU,QAAA,EACKJ,KAAK,CAACQ,GAAG,CAAEC,IAAI,iBACZf,OAAA;QAAAU,QAAA,gBACIV,OAAA;UAAAU,QAAA,gBACIV,OAAA;YACI6B,IAAI,EAAC,OAAO;YACZH,KAAK,EAAEX,IAAI,CAACP,EAAG;YACfsB,OAAO,EAAE1B,YAAY,KAAKW,IAAI,CAACP,EAAG;YAClCuB,QAAQ,EAAGC,KAAK,IAAK;cACjB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACR,KAAK;cAChC;cACA;cACA;cACA;cACA;YACJ;UAAE;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,EACDvB,IAAI,CAACN,IAAI;QAAA;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC,EACPvB,IAAI,CAACL,QAAQ,IAAIkB,UAAU,CAACb,IAAI,CAACL,QAAQ,CAAC;MAAA,GAjBtCK,IAAI,CAACP,EAAE;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBZ,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEb,CAAC;EAED,oBACItC,OAAA;IAAAU,QAAA,GACKkB,UAAU,CAACtB,KAAK,CAAC,eAClBN,OAAA;MAAMuC,SAAS,EAAC,yBAAyB;MAACC,QAAQ,EAAEnB,WAAY;MAAAX,QAAA,gBAC5DV,OAAA;QAAKuC,SAAS,EAAC,gBAAgB;QAAA7B,QAAA,eAC3BV,OAAA;UAAOyC,GAAG,EAAEtC,YAAa;UAAC0B,IAAI,EAAC,MAAM;UAACU,SAAS,EAAC,cAAc;UAACG,WAAW,EAAC;QAAM;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzF,CAAC,eACNtC,OAAA;QAAQuC,SAAS,EAAC,qBAAqB;QAACV,IAAI,EAAC,QAAQ;QAAAnB,QAAA,EAAC;MAAQ;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEd,CAAC;AAACpC,EAAA,CAxHID,IAAc;AAAA0C,EAAA,GAAd1C,IAAc;AA0HpB,eAAeA,IAAI;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}