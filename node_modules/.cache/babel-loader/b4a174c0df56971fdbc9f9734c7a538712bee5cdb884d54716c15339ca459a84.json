{"ast":null,"code":"var _jsxFileName = \"/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport ModalAdd from \"./ModalAdd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = () => {\n  _s();\n  const [showModalAdd, setShowModalAdd] = useState(false);\n  const [showModalEdit, setShowModalEdit] = useState(false);\n  const titleNodeRef = useRef(null);\n  const titleNodeEditRef = useRef(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    name: 'Element 1',\n    children: [{\n      id: 2,\n      name: 'Element 1.1',\n      children: [{\n        id: 3,\n        name: 'Element 1.1.1'\n      }, {\n        id: 4,\n        name: 'Element 1.1.2'\n      }]\n    }, {\n      id: 5,\n      name: 'Element 1.2'\n    }]\n  }]);\n  const addChildNode = (nodes, parentId, newNode) => {\n    return nodes.map(node => {\n      if (node.id === parentId) {\n        return {\n          ...node,\n          children: [...(node.children || []), newNode]\n        };\n      } else if (node.children) {\n        return {\n          ...node,\n          children: addChildNode(node.children, parentId, newNode)\n        };\n      }\n      return node;\n    });\n  };\n  const getMaxId = arr => {\n    let maxId = 0;\n    arr.forEach(node => {\n      if (node.id > maxId) {\n        maxId = node.id;\n      }\n      if (node.children) {\n        const childMaxId = getMaxId(node.children);\n        if (childMaxId > maxId) {\n          maxId = childMaxId;\n        }\n      }\n    });\n    return maxId;\n  };\n  function getNameById(id, nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.id === id) {\n        return node.name;\n      } else if (node.children) {\n        const result = getNameById(id, node.children);\n        if (result !== null) {\n          return result;\n        }\n      }\n    }\n    return '';\n  }\n  const onSubmitAdd = ev => {\n    var _titleNodeRef$current;\n    ev.preventDefault();\n    const newNode = {\n      id: getMaxId(nodes) + 1,\n      name: ((_titleNodeRef$current = titleNodeRef.current) === null || _titleNodeRef$current === void 0 ? void 0 : _titleNodeRef$current.value) || ''\n    };\n    if (selectedNode !== 0) {\n      const updatedNodes = addChildNode(nodes, selectedNode, newNode);\n      setNodes(updatedNodes);\n    } else {\n      setNodes([...nodes, newNode]);\n    }\n    setShowModalAdd(false);\n  };\n  const renderTree = nodes => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nodes.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: node.id,\n            checked: selectedNode === node.id,\n            onChange: event => {\n              const newId = +event.target.value;\n              setSelectedNode(newId);\n              // console.log(selectedNode);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this), node.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this), node.children && renderTree(node.children)]\n      }, node.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  };\n  const handleShowModalAdd = () => {\n    setShowModalAdd(true);\n  };\n  const handleCloseModalAdd = () => {\n    setShowModalAdd(false);\n  };\n  const handleShowModalEdit = () => {\n    var _getNameById;\n    setShowModalEdit(true);\n    setInputValue((_getNameById = getNameById(selectedNode, nodes)) !== null && _getNameById !== void 0 ? _getNameById : \"\");\n  };\n  const handleCloseModalEdit = () => {\n    setShowModalEdit(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderTree(nodes), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShowModalAdd,\n        children: \"Show Modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalAdd, {\n        isOpen: showModalAdd,\n        onClose: handleCloseModalAdd,\n        nodes: nodes,\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form form-control w-100\",\n          onSubmit: onSubmitAdd,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group m-3\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: titleNodeRef,\n              type: \"text\",\n              className: \"form-control\",\n              placeholder: \"\\u0422\\u0435\\u043C\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success m-3\",\n            type: \"submit\",\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModalAdd,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShowModalEdit,\n        disabled: selectedNode === 0,\n        children: \"Show Modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalAdd, {\n        isOpen: showModalEdit,\n        onClose: handleCloseModalEdit,\n        nodes: nodes,\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form form-control w-100\",\n          onSubmit: onSubmitAdd,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group m-3\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: titleNodeEditRef,\n              defaultValue: inputValue,\n              type: \"text\",\n              className: \"form-control\",\n              placeholder: \"\\u0422\\u0435\\u043C\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success m-3\",\n            type: \"submit\",\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModalEdit,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n_s(Tree, \"VXqURmFTBjc06CpqlVbNACpjWgY=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useRef","useState","ModalAdd","jsxDEV","_jsxDEV","Tree","_s","showModalAdd","setShowModalAdd","showModalEdit","setShowModalEdit","titleNodeRef","titleNodeEditRef","inputValue","setInputValue","selectedNode","setSelectedNode","nodes","setNodes","id","name","children","addChildNode","parentId","newNode","map","node","getMaxId","arr","maxId","forEach","childMaxId","getNameById","i","length","result","onSubmitAdd","ev","_titleNodeRef$current","preventDefault","current","value","updatedNodes","renderTree","type","checked","onChange","event","newId","target","fileName","_jsxFileName","lineNumber","columnNumber","handleShowModalAdd","handleCloseModalAdd","handleShowModalEdit","_getNameById","handleCloseModalEdit","className","onClick","isOpen","onClose","onSubmit","ref","placeholder","disabled","defaultValue","_c","$RefreshReg$"],"sources":["/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx"],"sourcesContent":["import React, {useRef, useState} from 'react';\nimport ModalAdd from \"./ModalAdd\";\n\ninterface Node {\n    id: number;\n    name: string;\n    children?: Node[];\n}\n\n\n\nconst Tree: React.FC = () => {\n\n    const [showModalAdd, setShowModalAdd] = useState(false);\n    const [showModalEdit, setShowModalEdit] = useState(false);\n\n\n\n    const titleNodeRef: React.RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);\n    const titleNodeEditRef: React.RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);\n    const [inputValue, setInputValue] = useState(\"\");\n    const [selectedNode, setSelectedNode] = useState(0);\n    const [nodes, setNodes] = useState<Node[]>([\n        {\n            id: 1,\n            name: 'Element 1',\n            children: [\n                {\n                    id: 2,\n                    name: 'Element 1.1',\n                    children: [\n                        {\n                            id: 3,\n                            name: 'Element 1.1.1',\n                        },\n                        {\n                            id: 4,\n                            name: 'Element 1.1.2',\n                        },\n                    ],\n                },\n                {\n                    id: 5,\n                    name: 'Element 1.2',\n                },\n            ],\n\n        },\n    ]);\n\n    const addChildNode = (nodes: Node[], parentId: number, newNode: Node): Node[] => {\n        return nodes.map((node) => {\n            if (node.id === parentId) {\n                return {\n                    ...node,\n                    children: [...(node.children || []), newNode],\n                };\n            } else if (node.children) {\n                return {\n                    ...node,\n                    children: addChildNode(node.children, parentId, newNode),\n                };\n            }\n            return node;\n        });\n    };\n\n    const getMaxId = (arr: Node[]): number => {\n        let maxId = 0;\n        arr.forEach((node) => {\n            if (node.id > maxId) {\n                maxId = node.id;\n            }\n            if (node.children) {\n                const childMaxId = getMaxId(node.children);\n                if (childMaxId > maxId) {\n                    maxId = childMaxId;\n                }\n            }\n        });\n        return maxId;\n    };\n\n    function getNameById(id: number, nodes: Node[]): string | '' {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (node.id === id) {\n                return node.name;\n            } else if (node.children) {\n                const result = getNameById(id, node.children);\n                if (result !== null) {\n                    return result;\n                }\n            }\n        }\n        return '';\n    }\n\n    const onSubmitAdd = (ev: any) => {\n        ev.preventDefault();\n\n        const newNode: Node = {\n            id: getMaxId(nodes) + 1,\n            name: titleNodeRef.current?.value || '',\n        };\n\n\n        if(selectedNode!==0) {\n            const updatedNodes = addChildNode(nodes, selectedNode, newNode);\n            setNodes(updatedNodes);\n        }else{\n            setNodes([...nodes, newNode]);\n        }\n        setShowModalAdd(false);\n\n    }\n\n    const renderTree = (nodes: Node[]) => {\n        return (\n            <ul>\n                {nodes.map((node) => (\n                    <li key={node.id}>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value={node.id}\n                                checked={selectedNode === node.id}\n                                onChange={(event) => {\n                                    const newId = +event.target.value;\n                                    setSelectedNode(newId);\n                                    // console.log(selectedNode);\n                                }}\n                            />\n                            {node.name}\n                        </label>\n                        {node.children && renderTree(node.children)}\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    const handleShowModalAdd = () => {\n        setShowModalAdd(true);\n    };\n\n    const handleCloseModalAdd = () => {\n        setShowModalAdd(false);\n    };\n    const handleShowModalEdit = () => {\n        setShowModalEdit(true);\n        setInputValue(getNameById(selectedNode, nodes) ?? \"\");\n    };\n\n    const handleCloseModalEdit = () => {\n        setShowModalEdit(false);\n    };\n\n    return (\n        <div>\n            {renderTree(nodes)}\n\n            {/*<AddNode />*/}\n            <div className=\"app\">\n                <button onClick={handleShowModalAdd}>Show Modal</button>\n                <ModalAdd isOpen={showModalAdd} onClose={handleCloseModalAdd} nodes={nodes}>\n                    <form className=\"form form-control w-100\" onSubmit={onSubmitAdd}>\n                        <div className=\"form-group m-3\">\n                            <input ref={titleNodeRef} type=\"text\" className=\"form-control\" placeholder=\"Тема\"></input>\n                        </div>\n                        <button className=\"btn btn-success m-3\" type=\"submit\">Добавить</button>\n                    </form>\n                    <button onClick={handleCloseModalAdd}>Close</button>\n                </ModalAdd>\n                <button onClick={handleShowModalEdit} disabled={selectedNode===0}>Show Modal</button>\n                <ModalAdd isOpen={showModalEdit} onClose={handleCloseModalEdit} nodes={nodes}>\n                    <form className=\"form form-control w-100\" onSubmit={onSubmitAdd}>\n                        <div className=\"form-group m-3\">\n                            <input ref={titleNodeEditRef} defaultValue={inputValue} type=\"text\" className=\"form-control\" placeholder=\"Тема\"></input>\n                        </div>\n                        <button className=\"btn btn-success m-3\" type=\"submit\">Добавить</button>\n                    </form>\n                    <button onClick={handleCloseModalEdit}>Close</button>\n                </ModalAdd>\n            </div>\n        </div>\n    );\n};\n\nexport default Tree;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}