{"ast":null,"code":"var _jsxFileName = \"/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport ModalAdd from \"./ModalAdd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = () => {\n  _s();\n  const [showModalAdd, setShowModalAdd] = useState(false);\n  const [showModalEdit, setShowModalEdit] = useState(false);\n  const baseNodes = [{\n    id: 1,\n    name: 'Базовый элемент 1',\n    children: [{\n      id: 2,\n      name: 'Базовый элемент 2',\n      children: [{\n        id: 3,\n        name: 'Базовый элемент 3'\n      }]\n    }]\n  }];\n  const titleNodeRef = useRef(null);\n  const titleNodeEditRef = useRef(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(0);\n  const [nodes, setNodes] = useState(baseNodes);\n  const addChildNode = (nodes, parentId, newNode) => {\n    return nodes.map(node => {\n      if (node.id === parentId) {\n        return {\n          ...node,\n          children: [...(node.children || []), newNode]\n        };\n      } else if (node.children) {\n        return {\n          ...node,\n          children: addChildNode(node.children, parentId, newNode)\n        };\n      }\n      return node;\n    });\n  };\n  const getMaxId = arr => {\n    let maxId = 0;\n    arr.forEach(node => {\n      if (node.id > maxId) {\n        maxId = node.id;\n      }\n      if (node.children) {\n        const childMaxId = getMaxId(node.children);\n        if (childMaxId > maxId) {\n          maxId = childMaxId;\n        }\n      }\n    });\n    return maxId;\n  };\n  function getNameById(id, nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.id === id) {\n        return node.name;\n      } else if (node.children) {\n        const result = getNameById(id, node.children);\n        if (result !== null) {\n          return result;\n        }\n      }\n    }\n    return '';\n  }\n  const updateName = (nodes, id, newName) => {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.id === id) {\n        node.name = newName;\n      } else if (node.children) {\n        const result = updateName(node.children, id, newName);\n      }\n    }\n  };\n  const removeNode = (nodes, id) => {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.id === id) {\n        if (node.children) {\n          for (const child of node.children) {\n            removeNode(nodes, child.id);\n          }\n        }\n        nodes.splice(i, 1);\n        return;\n      } else if (node.children) {\n        removeNode(node.children, id);\n      }\n    }\n  };\n  const onSubmitAdd = ev => {\n    var _titleNodeRef$current;\n    ev.preventDefault();\n    const newNode = {\n      id: getMaxId(nodes) + 1,\n      name: ((_titleNodeRef$current = titleNodeRef.current) === null || _titleNodeRef$current === void 0 ? void 0 : _titleNodeRef$current.value) || ''\n    };\n    if (selectedNode !== 0) {\n      const updatedNodes = addChildNode(nodes, selectedNode, newNode);\n      setNodes(updatedNodes);\n    } else {\n      setNodes([...nodes, newNode]);\n    }\n    setShowModalAdd(false);\n  };\n  const onSubmitEdit = ev => {\n    ev.preventDefault();\n    const newNodes = [...nodes];\n    updateName(newNodes, selectedNode, titleNodeEditRef.current ? titleNodeEditRef.current.value : '');\n    setNodes(newNodes);\n    setShowModalEdit(false);\n  };\n  const onClickDelete = ev => {\n    ev.preventDefault();\n    const newNodes = [...nodes];\n    removeNode(newNodes, selectedNode);\n    setNodes(newNodes);\n    setSelectedNode(0);\n  };\n  const onClickReset = ev => {\n    ev.preventDefault();\n    setNodes(baseNodes);\n  };\n  const renderTree = nodes => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nodes.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: node.id,\n            checked: selectedNode === node.id,\n            onChange: event => {\n              const newId = +event.target.value;\n              // console.log(newId);\n              if (newId === selectedNode) {\n                setSelectedNode(0);\n              } else {\n                setSelectedNode(newId);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this), node.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this), node.children && renderTree(node.children)]\n      }, node.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  };\n  const handleShowModalAdd = () => {\n    setShowModalAdd(true);\n  };\n  const handleCloseModalAdd = () => {\n    setShowModalAdd(false);\n  };\n  const handleShowModalEdit = () => {\n    var _getNameById;\n    setShowModalEdit(true);\n    setInputValue((_getNameById = getNameById(selectedNode, nodes)) !== null && _getNameById !== void 0 ? _getNameById : \"\");\n  };\n  const handleCloseModalEdit = () => {\n    setShowModalEdit(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-header\",\n      children: \"Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              value: \"0\",\n              checked: selectedNode === 0,\n              onChange: event => {\n                const newId = +event.target.value;\n                setSelectedNode(newId);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 21\n            }, this), \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u041A\\u043E\\u0440\\u043D\\u0435\\u0432\\u043E\\u0439 \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), renderTree(nodes)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleShowModalAdd,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalAdd, {\n        isOpen: showModalAdd,\n        onClose: handleCloseModalAdd,\n        nodes: nodes,\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form form-control w-100\",\n          onSubmit: onSubmitAdd,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group m-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ref: titleNodeRef,\n              type: \"text\",\n              className: \"form-control\",\n              placeholder: \"\\u0422\\u0435\\u043C\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              type: \"submit\",\n              children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: handleCloseModalAdd,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleShowModalEdit,\n        disabled: selectedNode === 0,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: onClickDelete,\n        disabled: selectedNode === 0,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: onClickReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalAdd, {\n        isOpen: showModalEdit,\n        onClose: handleCloseModalEdit,\n        nodes: nodes,\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form form-control w-100\",\n          onSubmit: onSubmitEdit,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group m-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ref: titleNodeEditRef,\n              defaultValue: inputValue,\n              type: \"text\",\n              className: \"form-control\",\n              placeholder: \"\\u0422\\u0435\\u043C\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              type: \"submit\",\n              children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: handleCloseModalEdit,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n};\n_s(Tree, \"nq6GJ110BoXDEK3g1weOLtsla8E=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useRef","useState","ModalAdd","jsxDEV","_jsxDEV","Tree","_s","showModalAdd","setShowModalAdd","showModalEdit","setShowModalEdit","baseNodes","id","name","children","titleNodeRef","titleNodeEditRef","inputValue","setInputValue","selectedNode","setSelectedNode","nodes","setNodes","addChildNode","parentId","newNode","map","node","getMaxId","arr","maxId","forEach","childMaxId","getNameById","i","length","result","updateName","newName","removeNode","child","splice","onSubmitAdd","ev","_titleNodeRef$current","preventDefault","current","value","updatedNodes","onSubmitEdit","newNodes","onClickDelete","onClickReset","renderTree","type","checked","onChange","event","newId","target","fileName","_jsxFileName","lineNumber","columnNumber","handleShowModalAdd","handleCloseModalAdd","handleShowModalEdit","_getNameById","handleCloseModalEdit","className","onClick","isOpen","onClose","onSubmit","ref","placeholder","disabled","defaultValue","_c","$RefreshReg$"],"sources":["/home/artem/Desktop/projects/mcc_tree_app/src/components/Tree.tsx"],"sourcesContent":["import React, {useRef, useState} from 'react';\nimport ModalAdd from \"./ModalAdd\";\n\ninterface Node {\n    id: number;\n    name: string;\n    children?: Node[];\n}\n\n\n\nconst Tree: React.FC = () => {\n\n    const [showModalAdd, setShowModalAdd] = useState(false);\n    const [showModalEdit, setShowModalEdit] = useState(false);\n    const baseNodes: Node[] = [\n        {\n            id: 1,\n            name: 'Базовый элемент 1',\n            children: [\n                {\n                    id: 2,\n                    name: 'Базовый элемент 2',\n                    children: [\n                        {\n                            id: 3,\n                            name: 'Базовый элемент 3',\n                        },\n                    ],\n                },\n            ],\n        },\n    ];\n\n\n    const titleNodeRef: React.RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);\n    const titleNodeEditRef: React.RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);\n    const [inputValue, setInputValue] = useState(\"\");\n    const [selectedNode, setSelectedNode] = useState(0);\n    const [nodes, setNodes] = useState<Node[]>(baseNodes);\n\n    const addChildNode = (nodes: Node[], parentId: number, newNode: Node): Node[] => {\n        return nodes.map((node) => {\n            if (node.id === parentId) {\n                return {\n                    ...node,\n                    children: [...(node.children || []), newNode],\n                };\n            } else if (node.children) {\n                return {\n                    ...node,\n                    children: addChildNode(node.children, parentId, newNode),\n                };\n            }\n            return node;\n        });\n    };\n\n    const getMaxId = (arr: Node[]): number => {\n        let maxId = 0;\n        arr.forEach((node) => {\n            if (node.id > maxId) {\n                maxId = node.id;\n            }\n            if (node.children) {\n                const childMaxId = getMaxId(node.children);\n                if (childMaxId > maxId) {\n                    maxId = childMaxId;\n                }\n            }\n        });\n        return maxId;\n    };\n\n    function getNameById(id: number, nodes: Node[]): string | '' {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (node.id === id) {\n                return node.name;\n            } else if (node.children) {\n                const result = getNameById(id, node.children);\n                if (result !== null) {\n                    return result;\n                }\n            }\n        }\n        return '';\n    }\n    const updateName = (nodes: Node[], id: number, newName: string) => {\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (node.id === id) {\n                node.name = newName;\n            } else if (node.children) {\n                const result = updateName(node.children, id, newName);\n            }\n        }\n    };\n\n    const removeNode = (nodes: Node[], id: number): void => {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (node.id === id) {\n                if (node.children) {\n                    for (const child of node.children) {\n                        removeNode(nodes, child.id);\n                    }\n                }\n                nodes.splice(i, 1);\n                return;\n            } else if (node.children) {\n                removeNode(node.children, id);\n            }\n        }\n    };\n\n    const onSubmitAdd = (ev: any) => {\n        ev.preventDefault();\n\n        const newNode: Node = {\n            id: getMaxId(nodes) + 1,\n            name: titleNodeRef.current?.value || '',\n        };\n\n        if(selectedNode!==0) {\n            const updatedNodes = addChildNode(nodes, selectedNode, newNode);\n            setNodes(updatedNodes);\n        }else{\n            setNodes([...nodes, newNode]);\n        }\n        setShowModalAdd(false);\n    }\n    const onSubmitEdit = (ev: any) => {\n        ev.preventDefault();\n        const newNodes = [...nodes];\n        updateName(newNodes, selectedNode, titleNodeEditRef.current?titleNodeEditRef.current.value:'')\n        setNodes(newNodes);\n        setShowModalEdit(false);\n    }\n\n    const onClickDelete = (ev: any) => {\n        ev.preventDefault();\n        const newNodes = [...nodes];\n        removeNode(newNodes, selectedNode)\n        setNodes(newNodes);\n        setSelectedNode(0);\n    }\n    const onClickReset = (ev: any) => {\n        ev.preventDefault();\n        setNodes(baseNodes);\n    }\n\n\n\n    const renderTree = (nodes: Node[]) => {\n        return (\n            <ul>\n\n                {nodes.map((node) => (\n                    <li key={node.id}>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value={node.id}\n                                checked={selectedNode === node.id}\n                                onChange={(event) => {\n                                    const newId = +event.target.value;\n                                    // console.log(newId);\n                                    if (newId === selectedNode) {\n                                        setSelectedNode(0);\n                                    } else {\n                                        setSelectedNode(newId);\n                                    }\n                                }}\n                            />\n                            {node.name}\n                        </label>\n                        {node.children && renderTree(node.children)}\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    const handleShowModalAdd = () => {\n        setShowModalAdd(true);\n    };\n\n    const handleCloseModalAdd = () => {\n        setShowModalAdd(false);\n    };\n    const handleShowModalEdit = () => {\n        setShowModalEdit(true);\n        setInputValue(getNameById(selectedNode, nodes) ?? \"\");\n    };\n\n    const handleCloseModalEdit = () => {\n        setShowModalEdit(false);\n    };\n\n    return (\n        <div className=\"tree\">\n            <div className=\"tree-header\">Tree</div>\n            <div className=\"tree-body\">\n            <ul>\n            <li>\n                <label>\n                    <input\n                        type=\"radio\"\n                        value='0'\n                        checked={selectedNode === 0}\n                        onChange={(event) => {\n                            const newId = +event.target.value;\n                            setSelectedNode(newId);\n                        }}\n                    />\n                    Добавить Корневой элемент\n                </label>\n            </li>\n            </ul>\n            {renderTree(nodes)}\n            </div>\n            {/*<AddNode />*/}\n            <div className=\"tree-footer\">\n                <button className=\"btn\" onClick={handleShowModalAdd}>Add</button>\n                <ModalAdd isOpen={showModalAdd} onClose={handleCloseModalAdd} nodes={nodes}>\n                    <form className=\"form form-control w-100\" onSubmit={onSubmitAdd}>\n                        <div className=\"form-group m-3\">\n                            <input ref={titleNodeRef} type=\"text\" className=\"form-control\" placeholder=\"Тема\"></input>\n                            <button className=\"btn\" type=\"submit\">Добавить</button>\n                        </div>\n                    </form>\n                    <button className=\"btn\" onClick={handleCloseModalAdd}>Close</button>\n                </ModalAdd>\n                <button className=\"btn\" onClick={handleShowModalEdit} disabled={selectedNode===0}>Edit</button>\n                <button className=\"btn\" onClick={onClickDelete} disabled={selectedNode===0}>Delete</button>\n                <button className=\"btn\" onClick={onClickReset}>Reset</button>\n                <ModalAdd isOpen={showModalEdit} onClose={handleCloseModalEdit} nodes={nodes}>\n                    <form className=\"form form-control w-100\" onSubmit={onSubmitEdit}>\n                        <div className=\"form-group m-3\">\n                            <input ref={titleNodeEditRef} defaultValue={inputValue} type=\"text\" className=\"form-control\" placeholder=\"Тема\"></input>\n                            <button className=\"btn\"  type=\"submit\">Добавить</button>\n                        </div>\n                    </form>\n                    <button className=\"btn\" onClick={handleCloseModalEdit}>Close</button>\n                </ModalAdd>\n            </div>\n        </div>\n    );\n};\n\nexport default Tree;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}